using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace VegaMapping
{
    public class GameMapping
    {
        public enum MachineModel
        {
            kb48 = 48,
            kb128 = 128
        }

        public GameMapping() { }

        public string FileName
        {
            get; set;
        }
        public string GameTitle
        {
            get; set;
        }
        public MachineModel Modle
        {
            get; set;
        }

        public string Pokes
        {
            //TODO: Pokes
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }

        public List<KeyMapping> KeyMappings
        {
            get; set;
        }

        public bool Validate(ref string errors)
        {
            StringBuilder sbErrors = new StringBuilder();
            

            if (string.IsNullOrWhiteSpace(FileName) || FileName.Length > 64)
            {
                sbErrors.AppendLine("Filename must not be null, and cannot be longer than 64 characters.");
            }

            //TODO: Enforce the use of only ASCII characters 32-127 
            if (string.IsNullOrWhiteSpace(GameTitle) || GameTitle.Length > 32)
            {
                sbErrors.AppendLine("Game title must not be null, and cannot be longer than 32 characters.");
            }
            else
            {
                string[] filenameParts = FileName.Split('.');
                if(filenameParts.Length <2 || filenameParts[1].Length > 3)
                {
                    sbErrors.AppendLine("Game title does not include an extention, or extention is too long.");
                }
            }

            if(KeyMappings == null|| KeyMappings.Count == 0 || KeyMappings.Count > 2)
            {
                sbErrors.AppendLine("Key mappings are null or more than two have been defined.");
            }

            errors = sbErrors.ToString();
            return errors.Length == 0;
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine(string.Concat("# Keymap file for ", GameTitle));
            sb.AppendLine("# Generated by 'ZX Vega key mapper'");
            sb.AppendLine("# By Tony O'Bryan");
            sb.AppendLine(string.Concat("T:", GameTitle));
            sb.AppendLine(string.Concat("F:", FileName));
            sb.AppendLine(string.Concat("M:", ((int)Modle)).ToString());

            //TODO:Pokes

            int counter = 0;
            string descriptions = string.Empty;
            foreach(KeyMapping km in KeyMappings)
            {
                if(counter == 0)
                {
                    sb.Append(km.ToString(true));
                    descriptions = km.Descriptions.ToString(true);
                }
                else
                {
                    sb.Append(km.ToString());
                    descriptions = string.Concat(descriptions, km.Descriptions.ToString());
                }
                counter++;
            }

            sb.Append(Environment.NewLine);            
            sb.AppendLine(descriptions);

            return sb.ToString();
        }
    }
}
